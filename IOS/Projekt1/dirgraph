#!/usr/bin/env bash
#################################################################################################################
#   Projekt:    1.projekt z IOS
#   Autor:      Tomas Zubrik 
#   Datum:      26.03.2017
#   Popis:      Cílem úlohy je vytvořit skript, který prozkoumá adresář a vytvoří report o jeho obsahu. 
#               Předmětem rekurzivního zkoumání adresáře je počet souborů a adresářů, typy souborů 
#               (podle obsahu souboru) a velikosti souborů. 
#               Výstupem skriptu je textový report. Skript je konfigurovatelný pomocí příkazové řádky.
#################################################################################################################


POSIXLY_CORRECT=yes;
IFS=$'\n'
normalize=false;
ignore=false;


while getopts "i:n" opt ; do
    case "$opt" in
    n) normalize=true;;
    i) ignore=true; ING=$OPTARG;;
    \?) printf "Chybny option\n" >&2; exit 1;;
    esac
done

shift $(($OPTIND - 1))
DIR="$1"

if [ "$ING" = "$DIR" ]; then
    printf "Chyba pri ignorovani korenoveho adresara\n" >&2;
    exit 1;
fi

if [ -z $DIR ]; then DIR=".";
fi

if [ ! -d "$DIR" ]; then
    echo "Priecniok sa nepodarilo otvorit\n" >&2
    exit 1;
fi

if [ "$#" -gt 1 ]; then
    printf "Vacsi pocet argument\n" >&2
    exit 1;
fi

if [ $ignore = false ]; then
ND=$(find "$DIR" -type d | wc -l);
NF=$(find "$DIR" -type f | wc -l);

else
ND=$(find "$DIR" -type d | egrep "$ING" -v | wc -l);
NF=$(find "$DIR" -type f | egrep "$ING" -v | wc -l);
fi

printf "Root directory: $DIR\n"
printf "Directories: $ND\n"
printf "All files: $NF\n"

max=0;
null=0;

if [ $ignore = false ]; then
ar[0]=$(find "$DIR" -type f -size -100c | wc -l );                      if [ "${ar[0]}" -gt "$max" ]; then max=${ar[0]}; fi
ar[1]=$(find "$DIR" -type f -size +99c -size -1024c | wc -l );          if [ "${ar[1]}" -gt "$max" ]; then max=${ar[1]}; fi
ar[2]=$(find "$DIR" -type f -size +1023c -size -10240c | wc -l );       if [ "${ar[2]}" -gt "$max" ]; then max=${ar[2]}; fi
ar[3]=$(find "$DIR" -type f -size +10239c -size -102400c | wc -l );     if [ "${ar[3]}" -gt "$max" ]; then max=${ar[3]}; fi
ar[4]=$(find "$DIR" -type f -size +102399c -size -1048576c | wc -l );   if [ "${ar[4]}" -gt "$max" ]; then max=${ar[4]}; fi
ar[5]=$(find "$DIR" -type f -size +1048575c -size -10485760c | wc -l ); if [ "${ar[5]}" -gt "$max" ]; then max=${ar[5]}; fi
ar[6]=$(find "$DIR" -type f -size +10485759c -size -104857600c | wc -l );   if [ "${ar[6]}" -gt "$max" ]; then max=${ar[6]}; fi
ar[7]=$(find "$DIR" -type f -size +104857599c -size -1073741824c | wc -l ); if [ "${ar[7]}" -gt "$max" ]; then max=${ar[7]}; fi
ar[8]=$(find "$DIR" -type f -size +1073741823c | wc -l );               if [ "${ar[8]}" -gt "$max" ]; then max=${ar[8]}; fi

else 
ar[0]=$(find "$DIR" -type f -size -100c |                           egrep "$ING" -v | wc -l );  if [ "${ar[0]}" -gt "$max" ]; then max=${ar[0]}; fi
ar[1]=$(find "$DIR" -type f -size +99c -size -1024c |               egrep "$ING" -v | wc -l );  if [ "${ar[1]}" -gt "$max" ]; then max=${ar[1]}; fi
ar[2]=$(find "$DIR" -type f -size +1023c -size -10240c |            egrep "$ING" -v | wc -l );  if [ "${ar[2]}" -gt "$max" ]; then max=${ar[2]}; fi
ar[3]=$(find "$DIR" -type f -size +10239c -size -102400c |          egrep "$ING" -v | wc -l );  if [ "${ar[3]}" -gt "$max" ]; then max=${ar[3]}; fi
ar[4]=$(find "$DIR" -type f -size +102399c -size -1048576c |        egrep "$ING" -v | wc -l );  if [ "${ar[4]}" -gt "$max" ]; then max=${ar[4]}; fi
ar[5]=$(find "$DIR" -type f -size +1048575c -size -10485760c |      egrep "$ING" -v | wc -l );  if [ "${ar[5]}" -gt "$max" ]; then max=${ar[5]}; fi
ar[6]=$(find "$DIR" -type f -size +10485759c -size -104857600c |    egrep "$ING" -v | wc -l );  if [ "${ar[6]}" -gt "$max" ]; then max=${ar[6]}; fi
ar[7]=$(find "$DIR" -type f -size +104857599c -size -1073741824c |  egrep "$ING" -v | wc -l );  if [ "${ar[7]}" -gt "$max" ]; then max=${ar[7]}; fi
ar[8]=$(find "$DIR" -type f -size +1073741823c |                    egrep "$ING" -v | wc -l );  if [ "${ar[8]}" -gt "$max" ]; then max=${ar[8]}; fi
fi

cols=$(tput cols);  
sSize=67;   
tSize=`expr $cols - 13`

tDiv=$(($max/$tSize));
sDiv=$(($max/$sSize));

n=0;
if [ $normalize = true ]; then 

    n=1;
    if [ -t 1 ]; then
    
        terminal=true;
        t=1;
        
        if [ "$max" -gt "$tSize" ]; then
        
            i=0;
            while [ "$i" -le 8 ]; do 
                ar[$i]=$((${ar[$i]}*$tSize/$max));
                i=`expr $i + 1`;
            done
        fi
        
    else
    
        terminal=false; 
        t=0;
        if [ "$max" -gt "$sSize" ]; then
        
            i=0;
            while [ "$i" -le 8 ]; do
                ar[$i]=$((${ar[$i]}*$sSize/$max));
                i=`expr $i + 1`;
            done
        fi      
    fi      
fi  
    
printf "File size histogram:";
printf "\n  <100 B  : "; while [ "$null" -lt "${ar[0]}" ]; do  printf '#'; null=`expr $null + 1`; done; null=0;
printf "\n  <1 KiB  : "; while [ "$null" -lt "${ar[1]}" ]; do  printf '#'; null=`expr $null + 1`; done; null=0;
printf "\n  <10 KiB : "; while [ "$null" -lt "${ar[2]}" ]; do  printf '#'; null=`expr $null + 1`; done; null=0;
printf "\n  <100 KiB: "; while [ "$null" -lt "${ar[3]}" ]; do  printf '#'; null=`expr $null + 1`; done; null=0;
printf "\n  <1 MiB  : "; while [ "$null" -lt "${ar[4]}" ]; do  printf '#'; null=`expr $null + 1`; done; null=0;
printf "\n  <10 MiB : "; while [ "$null" -lt "${ar[5]}" ]; do  printf '#'; null=`expr $null + 1`; done; null=0;
printf "\n  <100 MiB: "; while [ "$null" -lt "${ar[6]}" ]; do  printf '#'; null=`expr $null + 1`; done; null=0;
printf "\n  <1 GiB  : "; while [ "$null" -lt "${ar[7]}" ]; do  printf '#'; null=`expr $null + 1`; done; null=0;
printf "\n  >=1 GiB : "; while [ "$null" -lt "${ar[8]}" ]; do  printf '#'; null=`expr $null + 1`; done;
printf '\n';
    
    
printf "File type histogram:\n";


if [ $NF -ge 1 ]; then
if [ $ignore = false ]; then

    file $(find "$DIR" -type f ) -b | cut -c -40  | sort | uniq -c | sort -rg | head -10 | 
        awk -v cols=$cols -v normal=$n -v terminal=$t 'BEGIN{
            tSize=cols-48;
            sSize=32;
            dSet=0;
            max=0;
           numHash=0;
        }
        {  
            fCounter=$1; $1="";
            if(dSet == 0)
            {
                max=fCounter;
                dSet+=1;
            }
            printf " %s", $0;
            
            if(length() == 41) 
            {
                printf "...: "; 
                
                if(normal == 1)
                {
                    if(terminal == 1 && max > tSize)
                        numHash=int(tSize*fCounter/max);
                        
                    else if(terminal == 0 && max > sSize)
                        numHash=int(sSize*fCounter/max);  
                    else
                        numHash=fCounter;
                }
                else
                    numHash=fCounter;
                
                for(i=0; i<numHash; i++)
                    printf "#";
                    
                printf "\n";
            }

            else 
            {
                for(i=length(); i<44; i++) 
                    printf " ";
                    
                printf ": ";
                
                if(normal == 1 )
                {
                    if(terminal == 1 && max > tSize)
                        numHash=int(tSize*fCounter/max);
                        
                    else if(terminal == 0 && max > sSize)
                        numHash=int(sSize*fCounter/max);
                    else
                        numHash=fCounter;
                }
                else
                    numHash=fCounter;
                    
                for(i=0; i<numHash; i++) 
                    printf "#";
                    
                printf "\n";

            }
        }'  
    else
        file $(find "$DIR" -type f | egrep "$ING" -v ) -b | cut -c -40 | sort | uniq -c | sort -rg | head -10 | 
        awk -v cols=$cols -v normal=$n -v terminal=$t 'BEGIN{
            tSize=cols-48;
            sSize=32;
            dSet=0;
            max=0;
            numHash=0;
        }
        {  
            fCounter=$1; $1="";
            if(dSet == 0)
            {
                max=fCounter;
                dSet+=1;
            }
            printf " %s", $0;
            
            if(length() == 41) 
            {
                printf "...: "; 
                
                if(normal == 1)
                {
                    if(terminal == 1 && max > tSize)
                        numHash=int(tSize*fCounter/max);
                        
                    else if(terminal == 0 && max > sSize)
                        numHash=int(sSize*fCounter/max);  
                    else
                        numHash=fCounter;
                }
                else
                    numHash=fCounter;
                
                for(i=0; i<numHash; i++)
                    printf "#";
                    
                printf "\n";
            }

            else 
            {
                for(i=length(); i<44; i++) 
                    printf " ";
                    
                printf ": ";
                
                if(normal == 1 )
                {
                    if(terminal == 1 && max > tSize)
                        numHash=int(tSize*fCounter/max);
                        
                    else if(terminal == 0 && max > sSize)
                        numHash=int(sSize*fCounter/max);
                    else
                        numHash=fCounter;
                }
                else
                    numHash=fCounter;
                    
                for(i=0; i<numHash; i++) 
                    printf "#";
                    
                printf "\n";

            }
        }'  
    fi    
fi

